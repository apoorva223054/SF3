/**
 * Copyright (c) 2012 - 2017 by NirvanaXP, LLC. All Rights reserved. Express
 * written consent required to use, copy, share, alter, distribute or transmit
 * this source code in part or whole through any means physical or electronic.
 **/
package com.nirvanaxp.utils.snssms;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.sns.AmazonSNS;
import com.amazonaws.services.sns.AmazonSNSClient;
import com.amazonaws.services.sns.AmazonSNSClientBuilder;
import com.amazonaws.services.sns.model.MessageAttributeValue;
import com.amazonaws.services.sns.model.PublishRequest;
import com.amazonaws.services.sns.model.PublishResult;
import com.nirvanaxp.common.utils.synchistory.InsertIntoHistory;
import com.nirvanaxp.common.utils.synchistory.TimezoneTime;
import com.nirvanaxp.server.util.NirvanaLogger;
import com.nirvanaxp.services.exceptions.InvalidSessionException;
import com.nirvanaxp.services.exceptions.NirvanaXPException;
import com.nirvanaxp.types.entities.discounts.Discount;
import com.nirvanaxp.types.entities.sms.SMSTemplate;
import com.nirvanaxp.types.entities.user.User;
import com.nirvanaxp.types.entities.user.UsersToDiscount;
import com.nirvanaxp.types.entity.snssms.SmsConfig;

// TODO: Auto-generated Javadoc
/**
 * The Class EmployeeManagementService.
 */

public class SNSService {

	/**  */
	// private EntityManager em;
	private final static NirvanaLogger logger = new NirvanaLogger(SNSService.class.getName());

	public String sendSNSByNumber(EntityManager em, User user, String locationId)
			throws NirvanaXPException, IOException, InvalidSessionException {

		em.getTransaction().begin();
		PublishResult result = null;
		try {

			String queryStringT = "select ci from SmsTemplate ci where  ci.status not in ('I','D') "
					+ " and ci.template_name = 'Signup_SMS'";
			TypedQuery<SMSTemplate> queryT = em.createQuery(queryStringT, SMSTemplate.class);
			SMSTemplate snsSmsTemplate = queryT.getSingleResult();

			String queryStringD = "select ci from Discount ci where  ci.status not in ('I','D') "
					+ " and ci.is_coupan = 1 and  ci.smsTempletId = " + snsSmsTemplate.getId();
			TypedQuery<Discount> queryD = em.createQuery(queryStringD, Discount.class);
			List<Discount> discount = queryD.getResultList();

			String queryStringConfig = "select ci from SmsConfig ci where  ci.status !='D'and "
					+ "ci.gatewayName  = 'AWS SMS'; ";
			TypedQuery<SmsConfig> query = em.createQuery(queryStringConfig, SmsConfig.class);
			SmsConfig smsConfig = query.getSingleResult();

			if (snsSmsTemplate == null) {
				logger.severe("Sns Sms Template Not Configure");

			} else if (smsConfig == null) {
				logger.severe("Sns Sms Config Not Configure");

			} else if (discount == null || (discount != null && discount.size() > 1)) {
				logger.severe("Multiple Discounts Configure");

			} else if (discount != null && !discount.isEmpty()) {
				AmazonSNS snsClient = AmazonSNSClientBuilder.defaultClient();
				// snsClient.setRegion(Region.getRegion(Regions.US_WEST_2));
				String coupanCode = "";
				if (discount.get(0).getIsAutoGenerated() == 1) {
					// Auto Generated Coupan Code

					coupanCode = (100000 + new Random().nextInt(900000)) + "";

				} else {
					coupanCode = discount.get(0).getCoupanCode();
				}

				String message = snsSmsTemplate.getTemplateText() + " " + coupanCode;
				String phoneNumber = user.getPhone();

				Map<String, MessageAttributeValue> smsAttributes = new java.util.HashMap<String, MessageAttributeValue>();

				smsAttributes.put("AWS.SNS.SMS.SMSType", new MessageAttributeValue().withStringValue("Transactional") // Sets
																														// the
																														// type
																														// to
																														// promotional.
						.withDataType("String"));
				smsAttributes.put("AWS.SNS.SMS.SenderID", new MessageAttributeValue().withStringValue("mySenderID") // The
																													// sender
																													// ID
																													// shown
																													// on
																													// the
																													// device.
						.withDataType("String"));

				result = snsClient.publish(new PublishRequest().withMessage(message).withPhoneNumber(phoneNumber)
						.withMessageAttributes(smsAttributes));
				System.out.println(result); // Prints the message ID.

				UsersToDiscount usersToDiscount = new UsersToDiscount();
				usersToDiscount.setCreated(new Date(new TimezoneTime().getGMTTimeInMilis()));
				usersToDiscount.setUpdated(new Date(new TimezoneTime().getGMTTimeInMilis()));
				usersToDiscount.setCreatedBy(user.getId());
				usersToDiscount.setUpdatedBy(user.getId());
				usersToDiscount.setDiscountId(discount.get(0).getId());
				usersToDiscount.setNumberOfTimeDiscountUsed(1);
				usersToDiscount.setDiscountCode(coupanCode);
				usersToDiscount.setUsersId(user.getId());
				em.persist(usersToDiscount);

				new InsertIntoHistory().insertSMSIntoHistory(em, user, snsSmsTemplate, message, phoneNumber, smsConfig,
						result.getMessageId(), locationId);

			}

		} catch (Exception e) {

			logger.severe("" + e);
		}

		em.getTransaction().commit();
		return result.getMessageId();
	}

	public String sendSNSByNumber(EntityManager em, User user, String locationId, String smsMessage,
			String operationName,String phoneNumber) throws NirvanaXPException, IOException, InvalidSessionException {

		String value =null; 	
		PublishResult result = null;
		try {
			logger.severe("sssssssstttttttttaaaaaaaaaaaaarrrrtttttttttinnnnnnnggggggggggg!!!!!!!!!!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			
			String queryStringT = "select ci from SMSTemplate ci where  ci.status not in ('I','D') "
					+ " and ci.templateName = '" + operationName + "'";
			TypedQuery<SMSTemplate> queryT = em.createQuery(queryStringT, SMSTemplate.class);
			SMSTemplate snsSmsTemplate = queryT.getSingleResult();

			String queryStringConfig = "select ci from SmsConfig ci where  ci.status !='D' and "
					+ "ci.gatewayName  = 'AWS SMS'";
			TypedQuery<SmsConfig> query = em.createQuery(queryStringConfig, SmsConfig.class);
			SmsConfig smsConfig = query.getSingleResult();

			if (snsSmsTemplate == null) {
				logger.severe("Sns Sms Template Not Configure");

			} else if (smsConfig == null) {
				logger.severe("Sns Sms Config Not Configure");

			} else {
				logger.severe(operationName+"!!!!!!!!!!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"+smsConfig.toString());
				AmazonSNS snsClient = AmazonSNSClientBuilder.defaultClient();
				// snsClient.setRegion(Region.getRegion(Regions.US_WEST_2));
				
				Map<String, MessageAttributeValue> smsAttributes = new java.util.HashMap<String, MessageAttributeValue>();

				smsAttributes.put("AWS.SNS.SMS.SMSType", new MessageAttributeValue().withStringValue("Transactional") // Sets
																														// the
																														// type
																														// to
																														// promotional.
						.withDataType("String"));
				smsAttributes.put("AWS.SNS.SMS.SenderID", new MessageAttributeValue().withStringValue(smsConfig.getSenderId()) // The
																													// sender
																													// ID
																													// shown
																													// on
																													// the
																													// device.
						.withDataType("String"));

				result = snsClient.publish(new PublishRequest().withMessage(smsMessage).withPhoneNumber(phoneNumber)
						.withMessageAttributes(smsAttributes));
				System.out.println(result); // Prints the message ID.

			 
				new InsertIntoHistory().insertSMSIntoHistory(em, user, snsSmsTemplate, smsMessage, phoneNumber, smsConfig,
						result.getMessageId(), locationId);
				value = result.getMessageId();
			}

		} catch (Exception e) {

			logger.severe(e);
		}

		 
		return value;
	}

	private static AmazonSNS getSNS() throws IOException {
		String awsAccessKey = System.getProperty("AWS_ACCESS_KEY_ID"); // "YOUR_AWS_ACCESS_KEY";
		String awsSecretKey = System.getProperty("AWS_SECRET_KEY"); // "YOUR_AWS_SECRET_KEY";

		if (awsAccessKey == null)
			awsAccessKey = "AKIAJ4FQSALKK4XTOZOQ";
		if (awsSecretKey == null)
			awsSecretKey = "qLOsioPoWtJWp+EldQMAN2FUXkQiiMv5P0PqpEET";

		AWSCredentials credentials = new BasicAWSCredentials(awsAccessKey, awsSecretKey);
		AmazonSNS sns = new AmazonSNSClient(credentials);

		sns.setEndpoint("https://sns.us-west-2.amazonaws.com");
		return sns;
	}

	public String sendSNSByNumber(String phoneNumber) throws NirvanaXPException, IOException, InvalidSessionException {
		PublishResult result = null;
		try {

			AmazonSNS snsClient = getSNS();// AmazonSNSClientBuilder.defaultClient();//

			String message = "Hi Kris Please Send Screen Shot this msg -NXP Shlok Pardeshi";

			Map<String, MessageAttributeValue> smsAttributes = new java.util.HashMap<String, MessageAttributeValue>();

			smsAttributes.put("AWS.SNS.SMS.SMSType", new MessageAttributeValue().withStringValue("Transactional") // Sets
																													// the
																													// type
																													// to
																													// promotional.
					.withDataType("String"));

			smsAttributes.put("AWS.SNS.SMS.SenderID", new MessageAttributeValue().withStringValue("mySenderID") // The
																												// sender
																												// ID
																												// shown
																												// on
																												// the
																												// device.
					.withDataType("String"));

			result = snsClient.publish(new PublishRequest().withMessage(message).withPhoneNumber(phoneNumber)
					.withMessageAttributes(smsAttributes));
			System.out.println(result); // Prints the message ID.

		} catch (Exception e) {

			logger.severe(e);
		}
		return result.getMessageId();
	}

}
